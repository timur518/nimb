<?php

namespace App\Filament\Widgets;

use App\Models\Task;
use Filament\Widgets\Widget;
use Guava\Calendar\Widgets\CalendarWidget;
use Illuminate\Support\Collection;
use Guava\Calendar\ValueObjects\CalendarEvent;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Carbon;
use Filament\Actions\Action;
use Livewire\WithPagination;
use Livewire\Component;
use Filament\Support\RawJs;

class MyCalendar extends CalendarWidget
{
    public string $calendarView = 'timeGridWeek';

    // –ö–ù–û–ü–ö–ò –°–ú–ï–ù–´ –†–ï–ñ–ò–ú–ê –ö–ê–õ–ï–ù–î–ê–†–Ø
    public function getHeaderActions(): array
    {
        return [
            Action::make('day')
                ->label('–î–µ–Ω—å')
                ->action(function () {
                    $this->calendarView = 'timeGridDay';
                })
                ->color(fn () => $this->calendarView === 'dayGridDay' ? 'primary' : 'gray'),

            Action::make('week')
                ->label('–ù–µ–¥–µ–ª—è')
                ->action(function () {
                    $this->calendarView = 'timeGridWeek';
                })
                ->color(fn () => $this->calendarView === 'timeGridWeek' ? 'primary' : 'gray'),

            Action::make('month')
                ->label('–ú–µ—Å—è—Ü')
                ->action(function () {
                    $this->calendarView = 'dayGridMonth';
                })
                ->color(fn () => $this->calendarView === 'dayGridMonth' ? 'primary' : 'gray'),
        ];
    }

    // –ó–ê–ü–†–û–° –ó–ê–î–ê–ß –ò–ó –ë–î
    public function getEvents(array $fetchInfo = []): Collection
    {
        return Task::query()
            ->where('user_id', Auth::id())
            ->whereNotNull('start_at')
            ->whereNotNull('deadline_at')
            ->get()
            ->map(function (Task $task) {
                $isOverdue = !$task->is_done && Carbon::parse($task->deadline_at)->isPast();
                $isDone = (bool) $task->is_done;

                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –ø–æ —Å—Ç–∞—Ç—É—Å—É
                $backgroundColor = match (true) {
                    $isDone => '#22c55e',    // ‚úÖ –ó–µ–ª—ë–Ω—ã–π ‚Äî –µ—Å–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
                    $isOverdue => '#ef4444', // üî¥ –ö—Ä–∞—Å–Ω—ã–π ‚Äî –µ—Å–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ –∏ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
                    default => '#3b82f6',    // üîµ –°–∏–Ω–∏–π ‚Äî –æ—Å—Ç–∞–ª—å–Ω–æ–µ
                };

                return CalendarEvent::make()
                    ->title($task->name)
                    ->start($task->start_at)
                    ->end($task->deadline_at) // –≤–∞–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å end, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω —Ç–∞–∫–æ–π –∂–µ –∫–∞–∫ start
                    ->display('auto') // <‚Äî –¥–æ–±–∞–≤–ª–µ–Ω–æ, —á—Ç–æ–±—ã —Ç–µ–∫—Å—Ç –ø–æ–∫–∞–∑—ã–≤–∞–ª—Å—è –≤ timeGrid
                    ->styles([
                        'background-color' => $backgroundColor,
                        'color' => '#ffffff',
                    ]);
            });
    }

    // –û—Ç–æ–±—Ä–∞–∂–∞—Ç—å —à–∫–∞–ª—É –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∏–Ω–∞—è —Å –ø–µ—Ä–≤–æ–π –∑–∞–¥–∞—á–∏
    public function getOptions(): array
    {
        return [
            'slotMinTime' => $this->getEarliestTaskTime(),
        ];
    }

    // –ò—â–µ–º —Å–∞–º–º—É—é —Ä–∞–Ω–Ω—é—é –∑–∞–¥–∞—á—É
    protected function getEarliestTaskTime(): string
    {
        $earliest = Task::query()
            ->where('user_id', Auth::id())
            ->whereDate('start_at', now()->toDateString())
            ->orderBy('start_at')
            ->value('start_at');

        return $earliest
            ? Carbon::parse($earliest)->format('H:i:s')
            : '05:00:00'; // fallback, –µ—Å–ª–∏ –∑–∞–¥–∞—á –Ω–µ—Ç
    }

    // –¢—Ä–∏–≥–≥–µ—Ä –Ω–∞ —Å–º–µ–Ω—É –≤–∏–¥–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    protected function getViewData(): array
    {
        return [
            'calendarKey' => md5($this->calendarView), // –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–µ–∂–∏–º–∞ –≤–∏–¥–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç –Ω–æ–≤—ã–π –∫–ª—é—á
        ];
    }

    public function getLocale() : string
    {
       return 'ru';
    }
}
